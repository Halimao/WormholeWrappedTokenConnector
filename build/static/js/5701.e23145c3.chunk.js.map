{"version":3,"file":"static/js/5701.e23145c3.chunk.js","mappings":"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","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/unsignedTransaction-BDOQhqcZ.mjs","../node_modules/@wormhole-foundation/wormhole-connect/lib/index-XkPtmd0r.mjs"],"sourcesContent":["var o = Object.defineProperty;\nvar c = (a, t, i) => t in a ? o(a, t, { enumerable: !0, configurable: !0, writable: !0, value: i }) : a[t] = i;\nvar s = (a, t, i) => c(a, typeof t != \"symbol\" ? t + \"\" : t, i);\nclass h {\n  constructor(t, i, n, r, e = !1) {\n    s(this, \"transaction\");\n    s(this, \"network\");\n    s(this, \"chain\");\n    s(this, \"description\");\n    s(this, \"parallelizable\");\n    this.transaction = t, this.network = i, this.chain = n, this.description = r, this.parallelizable = e;\n  }\n}\nexport {\n  h as A\n};\n","var v = Object.defineProperty;\nvar S = (a, e, t) => e in a ? v(a, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : a[e] = t;\nvar i = (a, e, t) => S(a, typeof e != \"symbol\" ? e + \"\" : e, t);\nimport { aN as I, aJ as f, aL as x, $, aP as m, d9 as U, aB as E, _ as w, a3 as o, cv as k, j as c, a7 as T, d as F, aO as C, L as h } from \"./address-BkeBsCZD.mjs\";\nimport { b as A, A as u, c as b, a as _, i as N } from \"./address-xvE59bSC.mjs\";\nimport { A as O } from \"./platform-BVScq6Cn.mjs\";\nimport { A as W } from \"./unsignedTransaction-BDOQhqcZ.mjs\";\nimport { r as Q } from \"./chain-uXEmLNMk.mjs\";\nconst R = [\n  { name: \"tokenBridgeAddress\", ...f },\n  { name: \"chain\", ...x() },\n  {\n    name: \"domainSeparator\",\n    binary: \"bytes\",\n    custom: $.encode(A),\n    omit: !0\n  },\n  { name: \"tokenId\", ...f },\n  // from https://github.com/aptos-labs/aptos-core/blob/25696fd266498d81d346fe86e01c330705a71465/aptos-move/framework/aptos-framework/sources/account.move#L90-L95\n  { name: \"domainSeparator\", binary: \"bytes\", custom: new Uint8Array([255]), omit: !0 }\n], P = (a) => I(R, a);\nclass d {\n  constructor(e, t, s, r) {\n    i(this, \"network\");\n    i(this, \"chain\");\n    i(this, \"connection\");\n    i(this, \"contracts\");\n    i(this, \"chainId\");\n    i(this, \"tokenBridgeAddress\");\n    this.network = e, this.chain = t, this.connection = s, this.contracts = r, this.chainId = m(t);\n    const n = r.tokenBridge;\n    if (!n)\n      throw new Error(`TokenBridge contract Address for chain ${t} not found`);\n    this.tokenBridgeAddress = n;\n  }\n  static async fromRpc(e, t) {\n    const [s, r] = await O.chainFromRpc(e), n = t[r];\n    if (n.network !== s)\n      throw new Error(\"Network mismatch \" + n.network + \" !== \" + s);\n    return new d(s, r, e, n.contracts);\n  }\n  async isWrappedAsset(e) {\n    try {\n      return await this.getOriginalAsset(e), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getOriginalAsset(e) {\n    const t = e.toString().split(A), s = await this.connection.getAccountResource({\n      accountAddress: t[0],\n      resourceType: `${this.tokenBridgeAddress}::state::OriginInfo`\n    });\n    if (!s)\n      throw U(e.toString());\n    const r = E(parseInt(s.token_chain.number)), n = new w(s.token_address.external_address);\n    return { chain: r, address: n };\n  }\n  async getTokenUniversalAddress(e) {\n    return new w(o.encode(k(e.toString()), !0));\n  }\n  async getTokenNativeAddress(e, t) {\n    const s = e === this.chain ? await this.getTypeFromExternalAddress(t.toString()) : await this.getAssetFullyQualifiedType({ chain: e, address: t });\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    return new u(s);\n  }\n  async hasWrappedAsset(e) {\n    try {\n      return await this.getWrappedAsset(e), !0;\n    } catch {\n    }\n    return !1;\n  }\n  async getWrappedAsset(e) {\n    if (c(e.address))\n      throw new Error(\"native asset cannot be a wrapped asset\");\n    const t = await this.getAssetFullyQualifiedType(e);\n    if (!t)\n      throw new Error(\"Invalid asset address.\");\n    return await this.connection.getAccountResource({\n      accountAddress: b(t),\n      resourceType: `${this.tokenBridgeAddress}::state::OriginInfo`\n    }), T(this.chain, t);\n  }\n  async isTransferCompleted(e) {\n    const s = (await this.connection.getAccountResource({\n      accountAddress: this.tokenBridgeAddress,\n      resourceType: `${this.tokenBridgeAddress}::state::State`\n    })).consumed_vaas.elems.handle;\n    try {\n      return await this.connection.getTableItem({\n        handle: s,\n        data: {\n          key_type: \"vector<u8>\",\n          value_type: \"u8\",\n          key: `0x${F.Buffer.from(C(e.hash)).toString(\"hex\")}`\n        }\n      }), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getWrappedNative() {\n    return T(this.chain, _);\n  }\n  async *createAttestation(e, t) {\n    const s = { chain: this.chain, address: new u(e) }, r = await this.getAssetFullyQualifiedType(s);\n    if (!r)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::attest_token::attest_token_entry`,\n      typeArguments: [r],\n      functionArguments: []\n    }, \"Aptos.AttestToken\");\n  }\n  async *submitAttestation(e, t) {\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin_type`,\n      typeArguments: [],\n      functionArguments: [h(e)]\n    }, \"Aptos.CreateWrappedCoinType\");\n    const s = await this.getAssetFullyQualifiedType(e.payload.token);\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin`,\n      typeArguments: [s],\n      functionArguments: [h(e)]\n    }, \"Aptos.CreateWrappedCoin\");\n  }\n  async *transfer(e, t, s, r, n) {\n    const B = 0n, p = 0n, y = c(s) ? _ : s.toString(), g = t.address.toUniversalAddress().toUint8Array(), l = m(t.chain);\n    n ? yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_with_payload_entry`,\n      typeArguments: [y],\n      functionArguments: [r, l, g, p, n]\n    }, \"Aptos.TransferTokensWithPayload\") : yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_entry`,\n      typeArguments: [y],\n      functionArguments: [r, l, g, B, p]\n    }, \"Aptos.TransferTokens\");\n  }\n  async *redeem(e, t, s = !0) {\n    const r = t.payload.token.chain === this.chain ? await this.getTypeFromExternalAddress(t.payload.token.address.toString()) : await this.getAssetFullyQualifiedType(t.payload.token);\n    if (!r)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::complete_transfer::submit_vaa_and_register_entry`,\n      typeArguments: [r],\n      functionArguments: [h(t)]\n    }, \"Aptos.CompleteTransfer\");\n  }\n  async getAssetFullyQualifiedType(e) {\n    return e.chain === this.chain ? N(e.address.toString()) ? e.address.toString() : null : `${d.getForeignAssetAddress(this.chain, this.tokenBridgeAddress, e)}::coin::T`;\n  }\n  /**\n   * Given a hash, returns the fully qualified type by querying the corresponding TypeInfo.\n   * @param address Hash of fully qualified type\n   * @returns The fully qualified type associated with the given hash\n   */\n  async getTypeFromExternalAddress(e) {\n    try {\n      const t = await this.connection.getAccountResource({\n        accountAddress: this.tokenBridgeAddress,\n        resourceType: `${this.tokenBridgeAddress}::state::State`\n      }), { handle: s } = t.native_infos, r = await this.connection.getTableItem({\n        handle: s,\n        data: {\n          key_type: `${this.tokenBridgeAddress}::token_hash::TokenHash`,\n          value_type: \"0x1::type_info::TypeInfo\",\n          key: { hash: e }\n        }\n      });\n      return r ? [\n        r.account_address,\n        String.fromCharCode(...o.decode(r.module_name)),\n        String.fromCharCode(...o.decode(r.struct_name))\n      ].join(A) : null;\n    } catch {\n      return null;\n    }\n  }\n  /**\n   * Derive the module address for an asset defined by the given origin chain and address.\n   * @param tokenBridgeAddress Address of token bridge (32 bytes)\n   * @param originChain Chain ID of chain that original asset is from\n   * @param originAddress Native address of asset\n   * @returns The module address for the given asset\n   */\n  static getForeignAssetAddress(e, t, s) {\n    if (c(s.address))\n      throw new Error(\"Invalid token address\");\n    const r = P({\n      chain: s.chain,\n      tokenBridgeAddress: new u(t).toUniversalAddress(),\n      tokenId: s.address.toUniversalAddress()\n    });\n    return o.encode(k(r), !0);\n  }\n  createUnsignedTx(e, t, s = !1) {\n    return new W(e, this.network, this.chain, t, s);\n  }\n}\nQ(\"Aptos\", \"TokenBridge\", d);\nexport {\n  d as AptosTokenBridge\n};\n"],"names":["o","Object","defineProperty","s","a","t","i","c","enumerable","configurable","writable","value","h","constructor","n","r","e","arguments","length","undefined","this","transaction","network","chain","description","parallelizable","v","S","R","_objectSpread","name","f","x","binary","custom","$","encode","A","omit","Uint8Array","d","connection","contracts","chainId","m","tokenBridge","Error","concat","tokenBridgeAddress","fromRpc","O","chainFromRpc","isWrappedAsset","getOriginalAsset","_unused","toString","split","getAccountResource","accountAddress","resourceType","U","E","parseInt","token_chain","number","address","w","token_address","external_address","getTokenUniversalAddress","k","getTokenNativeAddress","getTypeFromExternalAddress","getAssetFullyQualifiedType","u","hasWrappedAsset","getWrappedAsset","_unused2","b","T","isTransferCompleted","consumed_vaas","elems","handle","getTableItem","data","key_type","value_type","key","F","Buffer","from","C","hash","_unused3","getWrappedNative","_","createAttestation","_this","_wrapAsyncGenerator","_awaitAsyncGenerator","createUnsignedTx","function","typeArguments","functionArguments","submitAttestation","_this2","payload","token","transfer","_this3","y","g","toUniversalAddress","toUint8Array","l","redeem","_x","_x2","_this4","apply","N","getForeignAssetAddress","native_infos","account_address","String","fromCharCode","decode","module_name","struct_name","join","_unused4","tokenId","I","W","Q"],"sourceRoot":""}