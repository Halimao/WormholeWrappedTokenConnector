{"version":3,"file":"static/js/1388.b042d36c.chunk.js","mappings":"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","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/index-CRYNS9pm.mjs","../node_modules/@wormhole-foundation/wormhole-connect/lib/unsignedTransaction-BD81leu1.mjs"],"sourcesContent":["var k = Object.defineProperty;\nvar v = (u, s, t) => s in u ? k(u, s, { enumerable: !0, configurable: !0, writable: !0, value: t }) : u[s] = t;\nvar i = (u, s, t) => v(u, typeof s != \"symbol\" ? s + \"\" : s, t);\nimport { T as f, b as w } from \"./platform-ByoVE-An.mjs\";\nimport { a1 as C, D as S, be as _, G as b, a3 as y, d8 as T } from \"./address-BkeBsCZD.mjs\";\nimport { S as M } from \"./unsignedTransaction-BD81leu1.mjs\";\nimport { r as x } from \"./chain-uXEmLNMk.mjs\";\nconst j = [\n  [\n    \"Testnet\",\n    {\n      tokenMessengerState: \"0x5252abd1137094ed1db3e0d75bc36abcd287aee4bc310f8e047727ef5682e7c2\",\n      messageTransmitterState: \"0x98234bd0fa9ac12cc0a20a144a22e36d6a32f7e0a97baaeaf9c76cdc6d122d2e\",\n      usdcTreasury: \"0x7170137d4a6431bf83351ac025baf462909bffe2877d87716374fb42b9629ebe\"\n    }\n  ],\n  [\n    \"Mainnet\",\n    {\n      tokenMessengerState: \"0x45993eecc0382f37419864992c12faee2238f5cfe22b98ad3bf455baf65c8a2f\",\n      messageTransmitterState: \"0xf68268c3d9b1df3215f2439400c1c4ea08ac4ef4bb7d6f3ca6a2a239e17510af\",\n      usdcTreasury: \"0x57d6725e7a8b49a7b2a612f6bd66ab5f39fc95332ca48be421c3229d514a6de7\"\n    }\n  ]\n], E = C(j, [0, 1]);\nclass p {\n  constructor(s, t, r, e) {\n    i(this, \"network\");\n    i(this, \"chain\");\n    i(this, \"provider\");\n    i(this, \"contracts\");\n    i(this, \"usdcId\");\n    i(this, \"usdcTreasuryId\");\n    i(this, \"tokenMessengerId\");\n    i(this, \"tokenMessengerStateId\");\n    i(this, \"messageTransmitterId\");\n    i(this, \"messageTransmitterStateId\");\n    var m, d, g, h;\n    if (this.network = s, this.chain = t, this.provider = r, this.contracts = e, s === \"Devnet\")\n      throw new Error(\"CircleBridge not supported on Devnet\");\n    const n = S.get(this.network, this.chain);\n    if (!n)\n      throw new Error(`No USDC contract configured for network=${this.network} chain=${this.chain}`);\n    const { tokenMessengerState: o, messageTransmitterState: a, usdcTreasury: c } = E(s);\n    if (!((m = e.cctp) != null && m.tokenMessenger))\n      throw new Error(`Circle Token Messenger contract for domain ${t} not found`);\n    if (!((d = e.cctp) != null && d.messageTransmitter))\n      throw new Error(`Circle Message Transmitter contract for domain ${t} not found`);\n    this.usdcId = n, this.usdcTreasuryId = c, this.tokenMessengerId = (g = e.cctp) == null ? void 0 : g.tokenMessenger, this.messageTransmitterId = (h = e.cctp) == null ? void 0 : h.messageTransmitter, this.tokenMessengerStateId = o, this.messageTransmitterStateId = a;\n  }\n  async *transfer(s, t, r) {\n    const e = new f(), n = _.get(this.network, t.chain), [o, ...a] = await w.getCoins(this.provider, s, this.usdcId);\n    if (o === void 0)\n      throw new Error(\"No USDC in wallet\");\n    const c = e.object(o.coinObjectId);\n    a.length > 0 && e.mergeCoins(c, a.map((d) => e.object(d.coinObjectId)));\n    const [m] = e.splitCoins(c, [r]);\n    e.moveCall({\n      target: `${this.tokenMessengerId}::deposit_for_burn::deposit_for_burn`,\n      arguments: [\n        m,\n        e.pure.u32(n),\n        // destination_domain\n        e.pure.address(t.address.toUniversalAddress().toString()),\n        // mint_recipient\n        e.object(this.tokenMessengerStateId),\n        // token_messenger_minter state\n        e.object(this.messageTransmitterStateId),\n        // message_transmitter state\n        e.object(\"0x403\"),\n        // deny_list id, fixed address\n        e.object(this.usdcTreasuryId)\n        // treasury object Treasury<USDC>\n      ],\n      typeArguments: [this.usdcId]\n    }), yield this.createUnsignedTx(e, \"Sui.CircleBridge.Transfer\");\n  }\n  async isTransferCompleted(s) {\n    const t = new f();\n    t.moveCall({\n      target: `${this.messageTransmitterId}::state::is_nonce_used`,\n      arguments: [\n        t.object(this.messageTransmitterStateId),\n        t.pure.u32(s.sourceDomain),\n        t.pure.u64(s.nonce)\n      ]\n    });\n    const r = await this.provider.devInspectTransactionBlock({\n      sender: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n      transactionBlock: t\n    });\n    try {\n      return !!r.results[0].returnValues[0][0][0];\n    } catch (e) {\n      return console.error(`Error reading if nonce was used: ${e}`), !1;\n    }\n  }\n  async *redeem(s, t, r) {\n    const e = new f(), [n] = e.moveCall({\n      target: `${this.messageTransmitterId}::receive_message::receive_message`,\n      arguments: [\n        e.pure.vector(\"u8\", b.serialize(t)),\n        e.pure.vector(\"u8\", y.decode(r)),\n        e.object(this.messageTransmitterStateId)\n        // message_transmitter state\n      ]\n    });\n    if (!n)\n      throw new Error(\"Failed to produce receipt\");\n    const [o] = e.moveCall({\n      target: `${this.tokenMessengerId}::handle_receive_message::handle_receive_message`,\n      arguments: [\n        n,\n        // Receipt object returned from receive_message call\n        e.object(this.tokenMessengerStateId),\n        // token_messenger_minter state\n        e.object(\"0x403\"),\n        // deny list, fixed address\n        e.object(this.usdcTreasuryId)\n        // usdc treasury object Treasury<T>\n      ],\n      typeArguments: [this.usdcId]\n    });\n    if (!o)\n      throw new Error(\"Failed to produce stamp receipt ticket with burn message\");\n    const [a] = e.moveCall({\n      target: `${this.tokenMessengerId}::handle_receive_message::deconstruct_stamp_receipt_ticket_with_burn_message`,\n      arguments: [o]\n    });\n    if (!a)\n      throw new Error(\"Failed to produce stamp receipt ticket\");\n    const [c] = e.moveCall({\n      target: `${this.messageTransmitterId}::receive_message::stamp_receipt`,\n      arguments: [\n        a,\n        // Receipt ticket returned from deconstruct_stamp_receipt_ticket_with_burn_message call\n        e.object(this.messageTransmitterStateId)\n        // message_transmitter state\n      ],\n      typeArguments: [\n        `${this.tokenMessengerId}::message_transmitter_authenticator::MessageTransmitterAuthenticator`\n      ]\n    });\n    if (!c)\n      throw new Error(\"Failed to produce stamped receipt\");\n    e.moveCall({\n      target: `${this.messageTransmitterId}::receive_message::complete_receive_message`,\n      arguments: [\n        c,\n        // Stamped receipt object returned from handle_receive_message call\n        e.object(this.messageTransmitterStateId)\n        // message_transmitter state\n      ]\n    }), yield this.createUnsignedTx(e, \"Sui.CircleBridge.Redeem\");\n  }\n  async parseTransactionDetails(s) {\n    var l;\n    const t = await this.provider.waitForTransaction({\n      digest: s,\n      options: { showEvents: !0, showEffects: !0, showInput: !0 }\n    });\n    if (!t)\n      throw new Error(\"Transaction not found\");\n    if (!t.events)\n      throw new Error(\"Transaction events not found\");\n    const r = (l = t.events) == null ? void 0 : l.find((I) => I.type.includes(\"send_message::MessageSent\"));\n    if (!r)\n      throw new Error(\"No MessageSent event found\");\n    const e = new Uint8Array((r == null ? void 0 : r.parsedJson).message), [n, o] = b.deserialize(e), { payload: a } = n, c = a.messageSender, m = a.mintRecipient, d = T(this.network, n.sourceDomain), g = T(this.network, n.destinationDomain), h = { chain: d, address: a.burnToken };\n    return {\n      from: { chain: d, address: c },\n      to: { chain: g, address: m },\n      token: h,\n      amount: a.amount,\n      message: n,\n      id: { hash: o }\n    };\n  }\n  static async fromRpc(s, t) {\n    const [r, e] = await w.chainFromRpc(s), n = t[e];\n    if (n.network !== r)\n      throw new Error(`Network mismatch: ${n.network} != ${r}`);\n    return new p(r, e, s, n.contracts);\n  }\n  createUnsignedTx(s, t, r = !1) {\n    return new M(s, this.network, this.chain, t, r);\n  }\n}\nx(\"Sui\", \"CircleBridge\", p);\nexport {\n  p as SuiCircleBridge,\n  j as _suiCircleObjects,\n  E as suiCircleObjects\n};\n","var c = Object.defineProperty;\nvar l = (a, i, t) => i in a ? c(a, i, { enumerable: !0, configurable: !0, writable: !0, value: t }) : a[i] = t;\nvar s = (a, i, t) => l(a, typeof i != \"symbol\" ? i + \"\" : i, t);\nclass h {\n  constructor(i, t, n, r, e = !1) {\n    s(this, \"transaction\");\n    s(this, \"network\");\n    s(this, \"chain\");\n    s(this, \"description\");\n    s(this, \"parallelizable\");\n    this.transaction = i, this.network = t, this.chain = n, this.description = r, this.parallelizable = e;\n  }\n}\nexport {\n  h as S\n};\n"],"names":["k","Object","defineProperty","i","u","s","t","v","enumerable","configurable","writable","value","j","tokenMessengerState","messageTransmitterState","usdcTreasury","E","C","p","constructor","r","e","m","d","g","h","this","network","chain","provider","contracts","Error","n","S","get","concat","o","a","c","cctp","tokenMessenger","messageTransmitter","usdcId","usdcTreasuryId","tokenMessengerId","messageTransmitterId","tokenMessengerStateId","messageTransmitterStateId","transfer","_this","_wrapAsyncGenerator","f","_","_awaitAsyncGenerator","w","getCoins","object","coinObjectId","length","mergeCoins","map","splitCoins","moveCall","target","arguments","pure","u32","address","toUniversalAddress","toString","typeArguments","createUnsignedTx","isTransferCompleted","sourceDomain","u64","nonce","devInspectTransactionBlock","sender","transactionBlock","results","returnValues","console","error","redeem","_this2","vector","b","serialize","y","decode","parseTransactionDetails","l","waitForTransaction","digest","options","showEvents","showEffects","showInput","events","find","I","type","includes","Uint8Array","parsedJson","message","deserialize","payload","messageSender","mintRecipient","T","from","to","destinationDomain","token","burnToken","amount","id","hash","fromRpc","chainFromRpc","undefined","M","x","transaction","description","parallelizable"],"sourceRoot":""}