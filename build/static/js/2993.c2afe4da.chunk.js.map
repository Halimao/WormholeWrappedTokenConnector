{"version":3,"file":"static/js/2993.c2afe4da.chunk.js","mappings":"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","sources":["../node_modules/@wormhole-foundation/wormhole-connect/lib/index-DVj58Xn9.mjs"],"sourcesContent":["var z = Object.defineProperty;\nvar _ = (p, e, t) => e in p ? z(p, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : p[e] = t;\nvar u = (p, e, t) => _(p, typeof e != \"symbol\" ? e + \"\" : e, t);\nimport { I as D, C as T } from \"./contract-C26uilM9.mjs\";\nimport { j as I, a3 as b, aP as S, aA as B, W as r, ac as j, aR as F, r as f, q as h, d6 as G, aU as g, aB as H, L as M, az as Y, d7 as J, aV as K, aW as X } from \"./address-BkeBsCZD.mjs\";\nimport { EvmWormholeCore as Z } from \"./index-BjeolB9D.mjs\";\nimport { EvmTokenBridge as tt } from \"./index-D4WbU33f.mjs\";\nimport { E as y } from \"./platform-tSU41623.mjs\";\nimport { E as et } from \"./unsignedTransaction-C0V0UbsS.mjs\";\nimport { r as nt } from \"./chain-uXEmLNMk.mjs\";\nconst v = new D([\n  \"function start((bytes32,address,address,address,address,address,uint256,uint256,uint256,uint256)) returns (address,uint16,uint64)\",\n  \"function receiveMessageAndSwap(bytes)\"\n]), ot = new D([\n  \"function quoteExactInputSingle((address,address,uint256,uint24,uint160)) public view returns (uint256,uint160,uint32,uint256)\"\n]), rt = \"https://gfx.relayers.xlabs.xyz/api/v1/swap/quote\";\nclass st {\n  static async quoteRelayer(e, t, o) {\n    var i;\n    if (I(t) || I(o))\n      throw new Error(\"how did you get here tho?\");\n    const n = b.encode(t.toUniversalAddress().toUint8Array(), !1), s = b.encode(o.toUniversalAddress().toUint8Array(), !1), a = { targetChain: S(e), sourceToken: n, targetToken: s };\n    try {\n      const c = await B.post(rt, a);\n      return BigInt(c.data.fee);\n    } catch (c) {\n      throw B.isAxiosError(c) ? new Error(`Error getting relayer fee: ${(i = c.response) == null ? void 0 : i.statusText}`) : c;\n    }\n  }\n}\nconst m = 100, x = {\n  ETH: [\n    r.tokenId(\"Arbitrum\", \"native\"),\n    r.tokenId(\"Base\", \"native\"),\n    r.tokenId(\"Ethereum\", \"native\"),\n    r.tokenId(\"Optimism\", \"native\")\n  ],\n  WETH: [\n    r.tokenId(\"Arbitrum\", \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\"),\n    r.tokenId(\"Avalanche\", \"0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB\"),\n    r.tokenId(\"Base\", \"0x4200000000000000000000000000000000000006\"),\n    r.tokenId(\"Bsc\", \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\"),\n    r.tokenId(\"Ethereum\", \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"),\n    r.tokenId(\"Optimism\", \"0x4200000000000000000000000000000000000006\"),\n    r.tokenId(\"Polygon\", \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\")\n  ],\n  wstETH: [\n    r.tokenId(\"Arbitrum\", \"0x5979D7b546E38E414F7E9822514be443A4800529\"),\n    r.tokenId(\"Base\", \"0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452\"),\n    r.tokenId(\"Ethereum\", \"0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0\"),\n    r.tokenId(\"Optimism\", \"0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb\"),\n    r.tokenId(\"Polygon\", \"0x03b54A6e9a984069379fae1a4fC4dBAE93B3bCCD\")\n  ],\n  USDT: [\n    r.tokenId(\"Arbitrum\", \"0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9\"),\n    r.tokenId(\"Avalanche\", \"0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7\"),\n    r.tokenId(\"Base\", \"0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2\"),\n    r.tokenId(\"Bsc\", \"0x55d398326f99059fF775485246999027B3197955\"),\n    r.tokenId(\"Ethereum\", \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"),\n    r.tokenId(\"Optimism\", \"0x94b008aA00579c1307B0EF2c499aD98a8ce58e58\"),\n    r.tokenId(\"Polygon\", \"0xc2132D05D31c914a87C6611C10748AEb04B58e8F\"),\n    r.tokenId(\"Celo\", \"0x48065fbBE25f71C9282ddf5e1cD6D6A887483D5e\")\n  ]\n};\nclass A {\n  constructor(e, t, o, n) {\n    u(this, \"network\");\n    u(this, \"chain\");\n    u(this, \"provider\");\n    u(this, \"contracts\");\n    u(this, \"chainId\");\n    u(this, \"core\");\n    u(this, \"tokenBridge\");\n    if (this.network = e, this.chain = t, this.provider = o, this.contracts = n, !n.portico)\n      throw new Error(\"Unsupported chain, no contract addresses for: \" + t);\n    this.core = new Z(e, t, o, n), this.tokenBridge = new tt(e, t, o, n), this.chainId = j.get(e, t);\n  }\n  static async fromRpc(e, t) {\n    const [o, n] = await y.chainFromRpc(e), s = t[n];\n    if (s.network !== o)\n      throw new Error(`Network mismatch: ${s.network} != ${o}`);\n    return new A(o, n, e, s.contracts);\n  }\n  async *transfer(e, t, o, n, s, d, a) {\n    const { minAmountStart: i, minAmountFinish: c } = a.swapAmounts;\n    if (i === 0n)\n      throw new Error(\"Invalid min swap amount\");\n    if (c === 0n)\n      throw new Error(\"Invalid min swap amount\");\n    const w = new F(e).toString(), [k, E] = f(this.network, this.chain, o), [U, P] = f(this.network, t.chain, s), l = h(E), q = h(await this.getTransferrableToken(l)), R = h(t), N = h(P), O = (/* @__PURE__ */ new Date()).valueOf() % 2 ** 4, W = G.serializeFlagSet({\n      flags: {\n        shouldWrapNative: k,\n        shouldUnwrapNative: U\n      },\n      recipientChain: S(t.chain),\n      bridgeNonce: O,\n      feeTierStart: m,\n      feeTierFinish: m,\n      padding: new Uint8Array(19)\n    }), $ = v.encodeFunctionData(\"start\", [\n      [\n        W,\n        l.toLowerCase(),\n        q,\n        N.toLowerCase(),\n        R,\n        d,\n        n.toString(),\n        i.toString(),\n        c.toString(),\n        a.relayerFee.toString()\n      ]\n    ]), Q = this.getTokenGroup(E.address.toString()), C = this.getPorticoAddress(Q);\n    k || (yield* this.approve(l, w, n, C));\n    const L = await this.core.getMessageFee(), V = {\n      to: C,\n      data: $,\n      value: L + (k ? n : 0n)\n    };\n    yield this.createUnsignedTransaction(g(V, w), \"PorticoBridge.Transfer\");\n  }\n  async *redeem(e, t) {\n    const o = H(t.payload.payload.flagSet.recipientChain), n = t.payload.payload.finalTokenAddress.toNative(o).toString(), s = this.getTokenGroup(n), d = this.getPorticoAddress(s), i = await new T(d, v.fragments, this.provider).getFunction(\"receiveMessageAndSwap\").populateTransaction(M(t)), c = new F(e).toString();\n    yield this.createUnsignedTransaction(g(i, c), \"PorticoBridge.Redeem\");\n  }\n  async isTransferCompleted(e) {\n    return await this.tokenBridge.tokenBridge.isTransferCompleted(Y(e.hash));\n  }\n  async quoteSwap(e, t, o, n) {\n    const [, s] = f(this.network, this.chain, e), [, d] = f(this.network, this.chain, t), a = h(s), i = h(d);\n    if (J(a, i))\n      return n;\n    const c = this.getQuoterAddress(o);\n    return (await new T(c, ot.fragments, this.provider).getFunction(\"quoteExactInputSingle\").staticCall([a, i, n, m, 0]))[0];\n  }\n  async quoteRelay(e, t) {\n    return await st.quoteRelayer(this.chain, e, t);\n  }\n  // For a given token, return the Wormhole-wrapped/highway token\n  // that actually gets bridged from this chain\n  async getTransferrableToken(e) {\n    const t = r.tokenId(this.chain, e), [, o] = f(this.network, this.chain, t);\n    if (this.chain === \"Ethereum\")\n      return o;\n    const n = Object.values(x).find((a) => a.find((i) => i.chain === this.chain && h(i) === h(o)));\n    if (!n)\n      throw new Error(`No token group found for ${e} on ${this.chain}`);\n    const s = n.find((a) => a.chain === \"Ethereum\");\n    if (!s)\n      throw new Error(`No Ethereum origin token found for ${e} on ${this.chain}`);\n    const d = await this.tokenBridge.getWrappedAsset(s);\n    return r.tokenId(this.chain, d.toString());\n  }\n  supportedTokens() {\n    const e = [];\n    for (const [t, o] of Object.entries(x))\n      for (const n of o)\n        n.chain === this.chain && e.push({ group: t, token: n });\n    return e;\n  }\n  getTokenGroup(e) {\n    const o = this.supportedTokens().find((n) => h(n.token) === e);\n    if (!o)\n      throw new Error(\"Token not found\");\n    return o.group;\n  }\n  async *approve(e, t, o, n) {\n    const s = y.getTokenImplementation(this.provider, e);\n    if (await s.allowance(t, n) < o) {\n      const a = await s.approve.populateTransaction(n, o);\n      yield this.createUnsignedTransaction(g(a, t), \"PorticoBridge.Approve\");\n    }\n  }\n  createUnsignedTransaction(e, t) {\n    return new et(K(e, this.chainId), this.network, this.chain, t, !1);\n  }\n  getPorticoAddress(e) {\n    const t = this.contracts.portico;\n    return e === \"USDT\" && t.porticoPancakeSwap || t.porticoUniswap;\n  }\n  getQuoterAddress(e) {\n    const t = this.contracts.portico;\n    return e === \"USDT\" && t.pancakeSwapQuoterV2 || t.uniswapQuoterV2;\n  }\n}\nnt(X, \"PorticoBridge\", A);\nexport {\n  A as EvmPorticoBridge\n};\n"],"names":["z","Object","defineProperty","u","p","e","t","_","enumerable","configurable","writable","value","v","D","ot","st","quoteRelayer","o","i","I","Error","n","b","encode","toUniversalAddress","toUint8Array","s","a","targetChain","S","sourceToken","targetToken","c","B","post","BigInt","data","fee","isAxiosError","concat","response","statusText","x","ETH","r","tokenId","WETH","wstETH","USDT","A","constructor","this","network","chain","provider","contracts","portico","core","Z","tokenBridge","tt","chainId","j","get","fromRpc","y","chainFromRpc","transfer","d","_this","_wrapAsyncGenerator","minAmountStart","minAmountFinish","swapAmounts","w","F","toString","k","E","f","U","P","l","h","q","_awaitAsyncGenerator","getTransferrableToken","R","N","O","Date","valueOf","W","G","serializeFlagSet","flags","shouldWrapNative","shouldUnwrapNative","recipientChain","bridgeNonce","feeTierStart","feeTierFinish","padding","Uint8Array","$","encodeFunctionData","toLowerCase","relayerFee","Q","getTokenGroup","address","C","getPorticoAddress","_asyncGeneratorDelegate","_asyncIterator","approve","V","to","getMessageFee","createUnsignedTransaction","g","redeem","_this2","H","payload","flagSet","finalTokenAddress","toNative","T","fragments","getFunction","populateTransaction","M","isTransferCompleted","Y","hash","quoteSwap","J","getQuoterAddress","staticCall","quoteRelay","values","find","getWrappedAsset","supportedTokens","entries","push","group","token","_this3","getTokenImplementation","allowance","et","K","porticoPancakeSwap","porticoUniswap","pancakeSwapQuoterV2","uniswapQuoterV2","nt","X"],"sourceRoot":""}