"use strict";(self.webpackChunkwormhole_connector=self.webpackChunkwormhole_connector||[]).push([[443,1472],{443:(e,t,r)=>{r.r(t),r.d(t,{SuiAutomaticTokenBridge:()=>p,SuiTokenBridge:()=>f,getTokenCoinType:()=>h,getTokenFromTokenRegistry:()=>g});var n=r(6218),o=r(600),a=r(6391),i=r(838),s=(r(1472),r(7547)),c=r(1394),d=r(9801),l=Object.defineProperty,u=(e,t,r)=>((e,t,r)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r)(e,"symbol"!=typeof t?t+"":t,r);const g=async(e,t,r)=>{var n,o,s;if(!(0,i.i)(r))throw new Error("Invalid Sui type: ".concat(r));const c=await(0,a.g)(e,t);if(!c)throw new Error("Unable to fetch object fields from token bridge state. Object ID: ".concat(t));const d=null==(o=null==(n=c.token_registry.fields)?void 0:n.id)?void 0:o.id;if(!d)throw new Error("Unable to fetch token registry object ID");const l=(0,i.o)(null==(s=c.token_registry)?void 0:s.type);if(!l)throw new Error("Unable to fetch token registry package ID");return e.getDynamicFieldObject({parentId:d,name:{type:"".concat(l,"::token_registry::Key<").concat(r,">"),value:{dummy_field:!1}}})},h=async(e,t,r,n)=>{var o,s,c,d;const l=await(0,a.g)(e,t);if(!l)throw new Error("Unable to fetch object fields from token bridge state");const u=null==(s=null==(o=l.token_registry)?void 0:o.fields)?void 0:s.coin_types,g=null==(d=null==(c=null==u?void 0:u.fields)?void 0:c.id)?void 0:d.id;if(!g)throw new Error("Unable to fetch coin types");const h=(0,i.q)(null==u?void 0:u.type);if(!h)throw new Error("Unable to get key type");const f=await e.getDynamicFieldObject({parentId:g,name:{type:h,value:{addr:[...r],chain:n}}});if(f.error){if("dynamicFieldNotFound"===f.error.code)return null;throw new Error("Unexpected getDynamicFieldObject response ".concat(f.error))}const p=(0,a.e)(f);if(!p)return null;if(!(0,a.i)(p))throw new Error("What?");return"value"in p?(0,i.r)(p.value):null};class f{constructor(e,t,r,n){u(this,"network"),u(this,"chain"),u(this,"provider"),u(this,"contracts"),u(this,"coreBridgeObjectId"),u(this,"tokenBridgeObjectId"),u(this,"chainId"),this.network=e,this.chain=t,this.provider=r,this.contracts=n,this.chainId=s.ac.get(e,t);const o=this.contracts.tokenBridge;if(!o)throw new Error("Wormhole Token Bridge contract for domain ".concat(t," not found"));const a=this.contracts.coreBridge;if(!a)throw new Error("Wormhole Token Bridge contract for domain ".concat(t," not found"));this.tokenBridgeObjectId=o,this.coreBridgeObjectId=a}static async fromRpc(e,t){const[r,n]=await a.b.chainFromRpc(e),o=t[n];if(o.network!==r)throw new Error("Network mismatch: ".concat(o.network," != ").concat(r));return new f(r,n,e,o.contracts)}async isWrappedAsset(e){try{return await this.getOriginalAsset(e),!0}catch(t){return!1}}async getOriginalAsset(e){let t=e.getCoinType();if(!(0,i.i)(t))throw new Error("Invalid Sui type: ".concat(t));const r=await g(this.provider,this.tokenBridgeObjectId,t),n=(0,a.e)(r);if(!n)throw(0,s.d9)(t);if(!(0,a.i)(n))throw new Error("Expected fields to be a MoveStruct");if(!("value"in n))throw new Error("Expected a `value` key in fields of MoveStruct");const o=n.value;if(!(0,a.f)(o))throw new Error("Expected fields to be a MoveStruct");const c=(0,i.r)(o.type);if(t=(0,i.r)(t),c.includes("wrapped_asset::WrappedAsset<".concat(t,">"))){const e=o.fields.info;if(!(0,a.f)(e))throw new Error("Expected fields to be a MoveStruct");const t=e.fields.token_address;if(!(0,a.f)(t))throw new Error("Expected fields to be a MoveStruct");if(!(0,a.i)(t.fields))throw new Error("Expected address data to be a MoveObject");if(!("value"in t.fields))throw new Error("Expected a `value` key in fields of MoveStruct");const r=t.fields.value;if(!(0,a.f)(r))throw new Error("Expected fields to be a MoveStruct");const n=new Uint8Array(r.fields.data);return{chain:(0,s.aB)(Number(e.fields.token_chain)),address:new s._(n)}}throw(0,s.d9)(t)}async getTokenUniversalAddress(e){let t=e.getCoinType();if(!(0,i.i)(t))throw new Error("Invalid Sui type: ".concat(t));const r=await g(this.provider,this.tokenBridgeObjectId,t),n=(0,a.e)(r);if(!n)throw new Error("Token of type ".concat(t," has not been registered with the token bridge. Has it been attested?"));if(!(0,a.i)(n))throw new Error("Expected fields to be a MoveStruct");if(!("value"in n))throw new Error("Expected a `value` key in fields of MoveStruct");const o=n.value;if(!(0,a.f)(o))throw new Error("Expected fields to be a MoveStruct");const c=(0,i.r)(o.type);if(t=(0,i.r)(t),c.includes("native_asset::NativeAsset<".concat(t,">"))){const e=o.fields.token_address;if(!(0,a.f)(e))throw new Error("Expected fields to be a MoveStruct");if(!("value"in e.fields))throw new Error("Expected a `value` key in fields of MoveStruct");const t=e.fields.value;if(!(0,a.f)(t))throw new Error("Expected fields to be a MoveStruct");const r=new Uint8Array(t.fields.data);return new s._(r)}throw new Error("Token of type ".concat(t," is not a native asset"))}async getTokenNativeAddress(e,t){const r=await h(this.provider,this.tokenBridgeObjectId,t.toUint8Array(),(0,s.aP)(e));if(!r)throw new Error("Token ".concat(t.toString()," not found in token registry"));return new i.S(r)}async hasWrappedAsset(e){try{return await this.getWrappedAsset(e),!0}catch(t){}return!1}async getWrappedAsset(e){if((0,s.j)(e.address))throw new Error("Token Address required, 'native' literal not supported");const t=await h(this.provider,this.tokenBridgeObjectId,e.address.toUniversalAddress().toUint8Array(),(0,s.aP)(e.chain));if(!t)throw(0,s.d9)((0,s.q)(e));return(0,s.a7)(this.chain,t)}async isTransferCompleted(e){var t,r,n,o,c,d,l,u;const g=await(0,a.g)(this.provider,this.tokenBridgeObjectId);if(!g)throw new Error("Unable to fetch object fields from token bridge state");const h=null==(r=null==(t=g.consumed_vaas)?void 0:t.fields)?void 0:r.hashes,f=(0,i.q)(null==(o=null==(n=null==h?void 0:h.fields)?void 0:n.items)?void 0:o.type);if(!f)throw new Error("Unable to get key type");const p=null==(u=null==(l=null==(d=null==(c=null==h?void 0:h.fields)?void 0:c.items)?void 0:d.fields)?void 0:l.id)?void 0:u.id;if(!p)throw new Error("Unable to fetch consumed VAAs table");const w=await this.provider.getDynamicFieldObject({parentId:p,name:{type:f,value:{data:[...(0,s.aO)(e.hash)]}}});if(!w.error)return!0;if("dynamicFieldNotFound"===w.error.code)return!1;throw new Error("Unexpected getDynamicFieldObject response ".concat(w.error))}createAttestation(e){var t=this;return(0,o.A)(function*(){const r=e.toString(),o=yield(0,n.A)(t.provider.getCoinMetadata({coinType:r}));if(null===o||null===o.id)throw new Error("Coin metadata ID for type ".concat(r," not found"));const[i,s]=yield(0,n.A)(t.getPackageIds()),c=new a.T,[d]=c.splitCoins(c.gas,[c.pure.u64(0n)]),[l]=c.moveCall({target:"".concat(s,"::attest_token::attest_token"),arguments:[c.object(t.tokenBridgeObjectId),c.object(o.id),c.pure.u32(0)],typeArguments:[r]});c.moveCall({target:"".concat(i,"::publish_message::publish_message"),arguments:[c.object(t.coreBridgeObjectId),d,l,c.object(a.a)]}),yield t.createUnsignedTx(c,"Sui.TokenBridge.CreateAttestation")})()}submitAttestation(e,t){var r=this;return(0,o.A)(function*(){const[o,c]=yield(0,n.A)(r.getPackageIds()),d=t.toString(),l=Math.min(e.payload.decimals,8),u=yield(0,n.A)(r.getCoinBuildOutput(o,c,l)),g=yield(0,n.A)((0,a.p)(u,d));yield r.createUnsignedTx(g,"Sui.TokenBridge.PrepareCreateWrapped");let h="",f="",p="",w="",y="",m=!1;for(;!m;){yield(0,n.A)(new Promise(e=>setTimeout(e,500)));const e=yield(0,n.A)(r.provider.queryTransactionBlocks({filter:{FromAddress:d},options:{showObjectChanges:!0},limit:3}));for(const t of e.data)if("objectChanges"in t){for(const e of t.objectChanges)(0,a.h)(e)&&void 0!==e.packageId?h=e.packageId:(0,a.j)(e)&&e.objectType.includes("WrappedAssetSetup")?(f=e.objectId,y=e.objectType.split(", ")[1].replace(">","")):(0,a.j)(e)&&e.objectType.includes("UpgradeCap")?p=e.objectId:(0,a.j)(e)&&e.objectType.includes("CoinMetadata")&&(w=e.objectId);if(""!==h&&""!==f&&""!==p&&""!==w){m=!0;break}h="",f="",p="",w=""}}const b=(0,i.u)(h),v=new a.T,[k]=v.moveCall({target:"".concat(o,"::vaa::parse_and_verify"),arguments:[v.object(r.coreBridgeObjectId),v.pure.vector("u8",(0,s.L)(e)),v.object(a.a)]}),[j]=v.moveCall({target:"".concat(c,"::vaa::verify_only_once"),arguments:[v.object(r.tokenBridgeObjectId),k]});v.moveCall({target:"".concat(c,"::create_wrapped::complete_registration"),arguments:[v.object(r.tokenBridgeObjectId),v.object(w),v.object(f),v.object(p),j],typeArguments:[b,y]}),yield r.createUnsignedTx(v,"Sui.TokenBridge.SubmitAttestation")})()}transfer(e,t,r,i,c){var d=this;return(0,o.A)(function*(){const o=e.toString(),l=((0,s.j)(r)?a.S:r).toString(),u=yield(0,n.A)(a.b.getCoins(d.provider,e,l)),[g,...h]=u.filter(e=>(0,a.k)(e.coinType,l));if(void 0===g)throw new Error("Coins array doesn't contain any coins of type ".concat(l));const[f,p]=yield(0,n.A)(d.getPackageIds()),w=new a.T,[y]=(()=>{if(l===a.S)return w.splitCoins(w.gas,[w.pure.u64(i)]);{const e=w.object(g.coinObjectId);return h.length&&w.mergeCoins(e,h.map(e=>w.object(e.coinObjectId))),w.splitCoins(e,[w.pure.u64(i)])}})(),[m]=w.splitCoins(w.gas,[w.pure.u64(0n)]),[b]=w.moveCall({target:"".concat(p,"::state::verified_asset"),arguments:[w.object(d.tokenBridgeObjectId)],typeArguments:[l]});if(c){if(!o)throw new Error("senderAddress is required for transfer with payload");let e=!1;const r=yield(0,n.A)((async()=>{const t=await(0,a.l)(d.provider,f,o);if(null!==t)return w.object(t);{const[t]=w.moveCall({target:"".concat(f,"::emitter::new"),arguments:[w.object(d.coreBridgeObjectId)]});return e=!0,t}})()),[i,u]=w.moveCall({target:"".concat(p,"::transfer_tokens_with_payload::prepare_transfer"),arguments:[r,b,y,w.pure.u16((0,s.aP)(t.chain)),w.pure.vector("u8",t.address.toUint8Array()),w.pure.vector("u8",c),w.pure.u32(0)],typeArguments:[l]});w.moveCall({target:"".concat(p,"::coin_utils::return_nonzero"),arguments:[u],typeArguments:[l]});const[g]=w.moveCall({target:"".concat(p,"::transfer_tokens_with_payload::transfer_tokens_with_payload"),arguments:[w.object(d.tokenBridgeObjectId),i],typeArguments:[l]});w.moveCall({target:"".concat(f,"::publish_message::publish_message"),arguments:[w.object(d.coreBridgeObjectId),m,g,w.object(a.a)]}),e&&w.transferObjects([r],w.pure.address(o)),yield d.createUnsignedTx(w,"Sui.TokenBridge.TransferWithPayload")}else{const[e,r]=w.moveCall({target:"".concat(p,"::transfer_tokens::prepare_transfer"),arguments:[b,y,w.pure.u16((0,s.aP)(t.chain)),w.pure.vector("u8",t.address.toUint8Array()),w.pure.u64(0n),w.pure.u32(0)],typeArguments:[l]});w.moveCall({target:"".concat(p,"::coin_utils::return_nonzero"),arguments:[r],typeArguments:[l]});const[n]=w.moveCall({target:"".concat(p,"::transfer_tokens::transfer_tokens"),arguments:[w.object(d.tokenBridgeObjectId),e],typeArguments:[l]});w.moveCall({target:"".concat(f,"::publish_message::publish_message"),arguments:[w.object(d.coreBridgeObjectId),m,n,w.object(a.a)]}),yield d.createUnsignedTx(w,"Sui.TokenBridge.Transfer")}})()}redeem(e,t){var r=this;return(0,o.A)(function(e,t){return function*(){const e=yield(0,n.A)(h(r.provider,r.tokenBridgeObjectId,t.payload.token.address.toUint8Array(),(0,s.aP)(t.payload.token.chain)));if(!e)throw new Error("Unable to fetch token coinType");const[o,i]=yield(0,n.A)(r.getPackageIds()),c=new a.T,[d]=c.moveCall({target:"".concat(o,"::vaa::parse_and_verify"),arguments:[c.object(r.coreBridgeObjectId),c.pure.vector("u8",(0,s.L)(t)),c.object(a.a)]}),[l]=c.moveCall({target:"".concat(i,"::vaa::verify_only_once"),arguments:[c.object(r.tokenBridgeObjectId),d]}),[u]=c.moveCall({target:"".concat(i,"::complete_transfer::authorize_transfer"),arguments:[c.object(r.tokenBridgeObjectId),l],typeArguments:[e]}),[g]=c.moveCall({target:"".concat(i,"::complete_transfer::redeem_relayer_payout"),arguments:[u],typeArguments:[e]});c.moveCall({target:"".concat(i,"::coin_utils::return_nonzero"),arguments:[g],typeArguments:[e]}),yield r.createUnsignedTx(c,"Sui.TokenBridge.Redeem")}()}).apply(this,arguments)}async getWrappedNative(){return(0,s.a7)(this.chain,a.S)}async getPackageIds(){return Promise.all([(0,a.m)(this.provider,this.coreBridgeObjectId),(0,a.m)(this.provider,this.tokenBridgeObjectId)])}async getCoinBuildOutput(e,t,r){var n;if(r>8)throw new Error("Decimals is capped at 8");const o=null==(n=await(0,a.n)(this.provider,this.tokenBridgeObjectId))?void 0:n.replace("0x","");if(!o)throw new Error("Original token bridge package ID not found for object ID ".concat(this.tokenBridgeObjectId));const c="a11ceb0b060000000901000a020a14031e1704350405392d07669f01088502600ae502050cea02160004010b010c0205020d000002000201020003030c020001000104020700000700010001090801010c020a050600030803040202000302010702080007080100020800080303090002070801010b020209000901010608010105010b0202080008030209000504434f494e095478436f6e7465787408565f5f305f325f3011577261707065644173736574536574757004636f696e0e6372656174655f777261707065640b64756d6d795f6669656c6404696e697414707265706172655f726567697374726174696f6e0f7075626c69635f7472616e736665720673656e646572087472616e736665720a74785f636f6e746578740f76657273696f6e5f636f6e74726f6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"+o+"00020106010000000001090b0031"+r.toString(16).padStart(2,"0")+"0a0138000b012e110238010200";return{modules:[s.a4.encode(s.a3.decode(c))],dependencies:["0x1","0x2",t,e].map(e=>(0,i.k)(e))}}createUnsignedTx(e,t){let r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return new c.S(e,this.network,this.chain,t,r)}}class p{constructor(e,t,r,n){u(this,"network"),u(this,"chain"),u(this,"connection"),u(this,"contracts"),u(this,"tokenBridgeRelayerObjectId"),u(this,"coreBridgeObjectId"),u(this,"tokenBridgeObjectId"),u(this,"fields"),this.network=e,this.chain=t,this.connection=r,this.contracts=n;const{tokenBridge:o,tokenBridgeRelayer:a,coreBridge:i}=n;if(!o||!a||!i)throw new Error("Some object IDs for ".concat(t," Automatic Token Bridge not found"));this.tokenBridgeRelayerObjectId=a,this.tokenBridgeObjectId=o,this.coreBridgeObjectId=i}static async fromRpc(e,t){const[r,n]=await a.b.chainFromRpc(e),o=t[n];if(o.network!==r)throw new Error("Network mismatch for chain ".concat(n,": ").concat(o.network," != ").concat(r));return new p(r,n,e,o.contracts)}transfer(e,t,r,c,d){var l=this;return(0,o.A)(function*(){const o=new i.S((0,s.j)(r)?a.b.nativeTokenId(l.network,l.chain).address:r).getCoinType(),{coreBridge:u,tokenBridge:g}=yield(0,n.A)(l.getPackageIds()),h=new a.T,f=BigInt(0),[p]=h.splitCoins(h.gas,[h.pure.u64(f)]),[w]=yield(0,n.A)((async()=>{if((0,s.j)(r))return h.splitCoins(h.gas,[h.pure.u64(c)]);{const t=await a.b.getCoins(l.connection,e,o),[r,...n]=t.filter(e=>e.coinType===o);if(void 0===r)throw new Error("Coins array doesn't contain any coins of type ".concat(o));const i=h.object(r.coinObjectId);return n.length&&h.mergeCoins(i,n.map(e=>h.object(e.coinObjectId))),h.splitCoins(i,[h.pure.u64(c)])}})()),[y]=h.moveCall({target:"".concat(g,"::state::verified_asset"),arguments:[h.object(l.tokenBridgeObjectId)],typeArguments:[o]}),m=yield(0,n.A)(l.getPackageId()),[b]=h.moveCall({target:"".concat(m,"::transfer::transfer_tokens_with_relay"),arguments:[h.object(l.tokenBridgeRelayerObjectId),w,y,h.pure.u64(null!==d&&void 0!==d?d:0n),h.pure.u16((0,s.aP)(t.chain)),h.pure.address(s.a3.encode(t.address.toUint8Array(),!0)),h.pure.u32(123)],typeArguments:[o]}),[v]=h.moveCall({target:"".concat(g,"::transfer_tokens_with_payload::transfer_tokens_with_payload"),arguments:[h.object(l.tokenBridgeObjectId),b],typeArguments:[o]});h.moveCall({target:"".concat(u,"::publish_message::publish_message"),arguments:[h.object(l.coreBridgeObjectId),p,v,h.object(a.a)]}),yield l.createUnsignedTx(h,"AutomaticTokenBridge.transfer")})()}redeem(e,t){var r=this;return(0,o.A)(function*(){const{coreBridge:e,tokenBridge:o}=yield(0,n.A)(r.getPackageIds()),{address:i,chain:c}=t.payload.token,d=yield(0,n.A)(h(r.connection,r.tokenBridgeObjectId,i.toUniversalAddress().toUint8Array(),(0,s.aP)(c)));if(!d)throw new Error("Unable to fetch token coinType");const l=new a.T,[u]=l.moveCall({target:"".concat(e,"::vaa::parse_and_verify"),arguments:[l.object(r.coreBridgeObjectId),l.pure.vector("u8",(0,s.L)(t)),l.object(a.a)]}),[g]=l.moveCall({target:"".concat(o,"::vaa::verify_only_once"),arguments:[l.object(r.tokenBridgeObjectId),u]}),[f]=l.moveCall({target:"".concat(o,"::complete_transfer_with_payload::authorize_transfer"),arguments:[l.object(r.tokenBridgeObjectId),g],typeArguments:[d]}),p=yield(0,n.A)(r.getPackageId());l.moveCall({target:"".concat(p,"::redeem::complete_transfer"),arguments:[l.object(r.tokenBridgeRelayerObjectId),f],typeArguments:[d]}),yield r.createUnsignedTx(l,"AutomaticTokenBridge.redeem")})()}async getRelayerFee(e,t){const r=(0,s.j)(t)?a.b.nativeTokenId(this.network,this.chain):t,n=await this.getTokenInfo(r.toString());if(null===n)throw new Error("Unsupported token for relay");const o=await this.getFields(),i=await this.connection.getDynamicFieldObject({parentId:this.tokenBridgeRelayerObjectId,name:{type:"vector<u8>",value:Array.from(s.$.encode("relayer_fees"))}});if(!i.data||!i.data.content)throw i.error?new Error("Failed to get relayer fees: "+JSON.stringify(i.error)):new Error("Unable to compute relayer fee");const{content:c}=i.data;if(!(0,a.f)(c)||!(0,a.o)(c.fields.id))throw new Error("Unable to compute relayer fee");const d=await this.connection.getDynamicFieldObject({parentId:c.fields.id.id,name:{type:"u16",value:(0,s.aP)(e)}});if(!d.data||!d.data.content)throw d.error?new Error("Failed to get relayer fees: "+JSON.stringify(i.error)):new Error("Unable to compute relayer fee");const{content:l}=d.data;if(!(0,a.f)(l))throw new Error("Unable to compute relayer fee");const u=await a.b.getDecimals(this.chain,this.connection,t.toString()),g=n.swap_rate,h=o.relayer_fee_precision,f=o.swap_rate_precision,p=l.fields.value;return 10n**BigInt(u)*BigInt(p)*BigInt(f)/(BigInt(g)*BigInt(h))}async maxSwapAmount(e){var t,r;const n=((0,s.j)(e)?a.b.nativeTokenId(this.network,this.chain):e).toString(),o=await this.connection.getCoinMetadata({coinType:n});if(!o)throw new Error("metadata is null");const i=await this.getPackageId(),c=new a.T;c.moveCall({target:"".concat(i,"::redeem::calculate_max_swap_amount_in"),arguments:[c.object(this.tokenBridgeRelayerObjectId),c.pure.u8(o.decimals)],typeArguments:[n]});const d=await this.connection.devInspectTransactionBlock({transactionBlock:c,sender:s.a3.encode(new Uint8Array(32))});if(!d.results||0==d.results.length||null==(t=d.results[0])||!t.returnValues||1!==(null==(r=d.results[0])?void 0:r.returnValues.length))throw Error("swap rate not set");return s.a0.decode(new Uint8Array(d.results[0].returnValues[0][0].toReversed()))}async nativeTokenAmount(e,t){var r,n;const o=((0,s.j)(e)?a.b.nativeTokenId(this.network,this.chain):e).toString(),i=await this.connection.getCoinMetadata({coinType:o});if(!i)throw new Error("metadata is null");const c=await this.getPackageId(),d=new a.T;d.moveCall({target:"".concat(c,"::redeem::calculate_native_swap_amount_out"),arguments:[d.object(this.tokenBridgeRelayerObjectId),d.pure.u64(t),d.pure.u8(i.decimals)],typeArguments:[o]});const l=await this.connection.devInspectTransactionBlock({transactionBlock:d,sender:s.a3.encode(new Uint8Array(32))});if(!l.results||0==l.results.length||null==(r=l.results[0])||!r.returnValues||1!==(null==(n=l.results[0])?void 0:n.returnValues.length))throw Error("swap rate not set");return s.a0.decode(new Uint8Array(l.results[0].returnValues[0][0].toReversed()))}async getRegisteredTokens(){const e=(await this.getFields()).registered_tokens.fields.id.id;return(await this.connection.getDynamicFields({parentId:e})).data.map(e=>{const{address:t,module:r,name:n}=(0,i.v)(e.objectType);return new i.S([t,r,n].join(i.w))})}async isRegisteredToken(e){const t=new i.S((0,s.j)(e)?a.b.nativeTokenId(this.network,this.chain).address:e).unwrap();try{return null!==await this.getTokenInfo(t)}catch(r){console.error(r)}return!1}async getTokenInfo(e){var t;const r=await this.getFields(),n=new i.S(r.registered_tokens.type).getPackageId(),o=r.registered_tokens.fields.id.id,s=new i.S(e),c=(0,a.k)(i.p,s.unwrap())?i.p:s.getCoinType();try{const e=await this.connection.getDynamicFieldObject({parentId:o,name:{type:"".concat(n,"::registered_tokens::Key<").concat(c,">"),value:{dummy_field:!1}}});if(e.error)throw new Error("Failed to get token info: "+JSON.stringify(e.error));if(!e.data||!e.data.content)throw new Error("Failed to get token info: "+JSON.stringify(e));const{content:t}=e.data;return(0,a.f)(t)&&(0,a.f)(t.fields.value)?t.fields.value.fields:null}catch(d){if(-32e3===(null==d?void 0:d.code)&&null!=(t=d.message)&&t.includes("RPC Error"))return console.error(d),null;throw d}}async getFields(){if(!this.fields){const e=await(0,a.g)(this.connection,this.tokenBridgeRelayerObjectId);if(null===e)throw new Error("Failed to get fields from token bridge relayer state");this.fields=e}return this.fields}async getPackageId(){const e=await this.getFields();return new i.S(e.registered_tokens.type).getPackageId()}async getPackageIds(){const[e,t]=await Promise.all([(0,a.m)(this.connection,this.coreBridgeObjectId),(0,a.m)(this.connection,this.tokenBridgeObjectId)]);return{coreBridge:e,tokenBridge:t}}createUnsignedTx(e,t){let r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return new c.S(e,this.network,this.chain,t,r)}}(0,d.r)("Sui","TokenBridge",f),(0,d.r)("Sui","AutomaticTokenBridge",p)},1394:(e,t,r)=>{r.d(t,{S:()=>a});var n=Object.defineProperty,o=(e,t,r)=>((e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r)(e,"symbol"!=typeof t?t+"":t,r);class a{constructor(e,t,r,n){let a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];o(this,"transaction"),o(this,"network"),o(this,"chain"),o(this,"description"),o(this,"parallelizable"),this.transaction=e,this.network=t,this.chain=r,this.description=n,this.parallelizable=a}}},1472:(e,t,r)=>{r.r(t),r.d(t,{SuiWormholeCore:()=>u});var n=r(600),o=r(7547),a=r(6391),i=r(4416),s=r(838),c=r(9801),d=Object.defineProperty,l=(e,t,r)=>((e,t,r)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r)(e,"symbol"!=typeof t?t+"":t,r);class u{constructor(e,t,r,n){l(this,"network"),l(this,"chain"),l(this,"provider"),l(this,"contracts"),l(this,"chainId"),l(this,"coreBridgePackageId"),this.network=e,this.chain=t,this.provider=r,this.contracts=n,this.chainId=(0,o.aP)(t);const a=n.coreBridge;if(!a)throw new Error("CoreBridge contract Address for chain ".concat(t," not found"));this.coreBridgePackageId=a}getGuardianSet(e){throw new Error("Method not implemented.")}getMessageFee(){throw new Error("Method not implemented.")}static async fromRpc(e,t){const[r,n]=await a.b.chainFromRpc(e),o=t[n];if(o.network!==r)throw new Error("Network mismatch: ".concat(o.network," !== ").concat(r));return new u(r,n,e,o.contracts)}verifyMessage(e,t){return(0,n.A)(function*(){throw new Error("Method not implemented.")})()}publishMessage(e,t){return(0,n.A)(function*(){throw new Error("Method not implemented.")})()}async parseTransaction(e){return(await this.parseMessages(e)).map(e=>({emitter:e.emitterAddress,sequence:e.sequence,chain:this.chain}))}async getGuardianSetIndex(){throw new Error("Method not implemented.")}async parseMessages(e){var t;const r=null==(t=(await this.provider.getTransactionBlock({digest:e,options:{showEvents:!0,showEffects:!0,showInput:!0}})).events)?void 0:t.filter(e=>e.type.endsWith("WormholeMessage"));if(!r||0==r.length)throw new Error("WormholeMessage not found");return r.map(e=>{const t=e.parsedJson;return(0,i.c)("Uint8Array",{emitterChain:this.chain,emitterAddress:new s.S(t.sender).toUniversalAddress(),sequence:BigInt(t.sequence),guardianSet:0,timestamp:Number(t.timestamp),consistencyLevel:t.consistency_level,nonce:t.nonce,signatures:[],payload:new Uint8Array(t.payload)})})}}(0,c.r)("Sui","WormholeCore",u)},4416:(e,t,r)=>{r.d(t,{c:()=>i});var n=r(9379),o=r(7547);function a(e){return[...o.dn,(0,o.dp)(e)]}function i(e,t){const[r,i]=(0,o.dl)(e),s=(0,o.dm)(a(e),t);return(0,n.A)((0,n.A)((0,n.A)({protocolName:r,payloadName:i,payloadLiteral:e},(0,o.dm)(o.dq,t)),s),{},{hash:(0,o.aO)((0,o.aN)(a(e),s))})}}}]);
//# sourceMappingURL=443.d8b0ae4e.chunk.js.map